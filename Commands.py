import requests
from time import sleep
from datetime import datetime

import tgcrypto
from pyrogram import Client, filters
from pyrogram.types import *

from Models.InlineButton import *

from Stuff.Duties import *
from Stuff.Errors import *
from Stuff.ParseMode import *


class Commands:

    def __init__(self, client: Client):
        self._client = client
        InlineButton.client = client
        self.duties: Duties = Duties()
        self.buttons: List[InlineButton] = List()

        timetable = requests.get("https://lyceum.nstu.ru/rasp/nika_data_11102021_161733.js", verify=False).text. \
            replace(
            "// nika_data.js;  description: schedule in JSON format\r\n"
            "// this file automatically generated by Nika-Soft(c) products\r\n \r\n"
            "var NIKA=\r\n",
            "").strip().replace(";", "")

        self._dutiesToday = self.duties.GetRandomDuties()
        self._lastSeenDay: int = datetime.today().day
        self._timetable = json.loads(timetable)

    async def ShowHelp(self, message: filters.Message):
        return await self._client.send_message(message.chat.id, "**Для просмотра дежурных** /work.\n"
                                                                "**Расписание** - /timetable.\n"
                                                                "**Точное время** - /time \n"
                                                                "**Домашнее задание** - /hw.\n"
                                                                "**Демотиватор** - /black __--картинка--__.\n\n"
                                                                "**Сохранить домашнее задание в бота** -\n"
                                                                "/newhw __--день недели-- --предмет-- --картинка--__",
                                               parse_mode=ParseMode.Markdown)

    async def ShowDuties(self, message: filters.Message):
        todayDay = datetime.today().day
        if self._lastSeenDay != todayDay:
            self._lastSeenDay = todayDay
            self._dutiesToday = self.duties.GetRandomDuties()

        return await self._client.send_message(message.chat.id,
                                               f"Дежурные сегодня - **{', '.join(self._dutiesToday)}**",
                                               parse_mode=ParseMode.Markdown)

    async def ChooseTimetable(self, message: filters.Message):
        return await self._client.send_message(message.chat.id, "Выберите день недели.",
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton(f"{self._timetable['DAY_NAMES'][h + w]}",
                                                                          callback_data=f"t{h + w}")
                                                     for w in range(0, 2)] for h in range(0, 5, 2)]))

    async def ShowTimetable(self, callbackQuery: filters.CallbackQuery):
        flag = True
        number = 1
        callbackQueryDataInt = int(callbackQuery.data[1:])
        result = "--{0}--\n".format(self._timetable['DAY_NAMES'][callbackQueryDataInt])

        for item in self._timetable['CLASS_SCHEDULE']['47']['029']:
            if item[0] == str(callbackQueryDataInt + 1):
                subjects = [self._timetable['SUBJECTS'][subject].title() for subject in self._timetable['SUBJECTS']
                            for ssg in self._timetable['CLASS_SCHEDULE']['47']['029'][item]['s'] if subject == ssg]

                teachers = [self._timetable['TEACHERS'][teacher].title() for teacher in self._timetable['TEACHERS']
                            for tsg in self._timetable['CLASS_SCHEDULE']['47']['029'][item]['t'] if teacher == tsg]

                rooms = [self._timetable['ROOMS'][room].title() for room in self._timetable['ROOMS']
                         for rsg in self._timetable['CLASS_SCHEDULE']['47']['029'][item]['r'] if room == rsg]

                if int(item[2]) == 3 and flag:
                    number += 2
                if (number - 1) % 2 == 0:
                    result += f"**Пара {number // 2 + 1}**\n"
                result += f"{number}. {' / '.join(subjects)}({' / '.join(rooms)})\n     {' / '.join(teachers)}\n"
                number += 1
                flag = False

        return await callbackQuery.edit_message_text(result, reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("Назад", callback_data="t-1")]]), parse_mode=ParseMode.Markdown)

    async def AgainChooseTimetable(self, callbackQuery: filters.CallbackQuery):
        return await callbackQuery.edit_message_text("Выберите день недели.",
                                                     reply_markup=InlineKeyboardMarkup(
                                                         [[InlineKeyboardButton(
                                                             f"{self._timetable['DAY_NAMES'][h + w]}",
                                                             callback_data=f"t{h + w}")
                                                           for w in range(0, 2)] for h in range(0, 5, 2)]))

    async def ShowTime(self, message: filters.Message):
        return await self._client.send_message(message.chat.id,
                                               "Дата: **{:%d-%m-%Y}** \n".format(datetime.today()) +
                                               "Время: **{:%H:%M:%S}**".format(datetime.today()),
                                               parse_mode=ParseMode.Markdown)

    async def ShowHomework(self, message: filters.Message):
        pass

    async def ShowBlack(self, message: filters.Message):
        await self._client.send_message(message.chat.id, "Called")
        # if message.photo:
        #     await self._client.download_media(message, r"aa.jpg")
        #
        # if message.reply_to_message:
        #     a = bytes(message.reply_to_message.photo.)
        #     await self._client.download_media(message.reply_to_message, r"aa.jpg")

    async def ShowGeneratedMeme(self, message: filters.Message):
        pass

    async def CreateHomework(self, message: filters.Message):
        """
        :param message: contains Weekday, Lesson, Photo
        :return:
        """
        if not message.caption:
            await Errors.PrintError(message, "Некорректно!")

        textList = message.caption.split(' ')[1:]
        resultList = [*textList, message.photo, message.message_id]
        # print(textList[1])
        # print(textList[2])
        print(resultList)

    async def Echo(self, message: filters.Message):
        textList = GetOnlyText(message.text)
        if len(textList) < 3:
            return await Errors.PrintError(message, "Недопустимая длина!")

        try:
            if int(textList[0]) > 100 or float(textList[1]) > 20:
                return await Errors.PrintError(message, "Недопустимая задержка!")
        except ValueError:
            return await Errors.PrintError(message, "Недопустимые символы!")

        duration = round(float(textList.pop(0))) if textList[0] else 0
        delay = float(textList.pop(0)) if textList[0] else 0

        return [await self._client.send_message(message.chat.id, ' '.join(textList))
                for _ in range(0, duration) if not sleep(delay)]

    async def Repeat(self, message: filters.Message):
        text = " " + message.reply_to_message.text if message.reply_to_message else message.text
        textList = GetOnlyText(text)
        if len(textList) < 1 or len(text) > 25:
            return await Errors.PrintError(message, "Недопустимая длина!")

        return [await self._client.send_message(message.chat.id, letter)
                for letter in ''.join(textList) if not sleep(0.8)]

    async def Ghoul(self, message: filters.Message):
        return await Errors.PrintError(message, "Отсутствует!")
        # startMessage = await self._client.send_message(message.chat.id, "1000 - 7 = 993")
        #
        # return [await self._client.edit_message_text(message.chat.id, startMessage.message_id,
        #                                              f"{i} - 7 = {i - 7}" if i >= 0 else "я гуль")
        #         for i in range(993, -7, -7) if not sleep(0.2)]
